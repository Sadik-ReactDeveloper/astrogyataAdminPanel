{"version":3,"sources":["views/apps/otherpages/OtherPage.js"],"names":["i","OtherPage","state","rowData","paginationPageSize","currenPageSize","getPageSize","select_sslmedia","url","isChecked","toggle","defaultColDef","sortable","editable","resizable","suppressMenu","inputList","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","pageName","desc","status","type","id","_id","name","inline","render","history","size","color","onClick","push","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onEditorStateChange","editorState","setState","draftToHtml","convertToRaw","getCurrentContent","console","log","handleSelect","e","target","value","handleAdd","preventDefault","FormData","append","axiosConfig","post","then","response","props","catch","error","changeHandler","getAllPage","axios","get","onGridReady","api","gridColumnApi","columnApi","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","lg","md","required","placeholder","onChange","wrapperClassName","editorClassName","toolbar","inDropdown","list","textAlign","link","image","uploadCallback","uploadImageCallBack","previewImage","alt","present","mandatory","tag","length","right","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/134.c7cdd45f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    UncontrolledDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle,\r\n    CustomInput, FormGroup, Label\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport axios from \"axios\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport { EditorState, convertToRaw } from \"draft-js\";\r\nimport \"../../../assets/scss/plugins/extensions/editor.scss\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown, CloudLightning } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nclass OtherPage extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        select_sslmedia: \"\",\r\n        url: \"\",\r\n        isChecked: false,\r\n        toggle: true,\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n            inputList: \"\",\r\n        },\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 100,\r\n                filter: true,\r\n                // checkboxSelection: true,\r\n                // headerCheckboxSelectionFilteredOnly: true,\r\n                // headerCheckboxSelection: true,\r\n            },\r\n\r\n            {\r\n                headerName: \"Page Name\",\r\n                field: \"pageName\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.pageName}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Desc\",\r\n                field: \"pagedesc\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params?.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Status\",\r\n                field: \"status\",\r\n                filter: true,\r\n                width: 100,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div>\r\n                            <span>{params?.data.status}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Action\",\r\n                field: \"sortorder\",\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"\">\r\n                            <CustomInput\r\n                                type=\"switch\"\r\n                                id={params.data._id}\r\n                                name=\"customSwitch\"\r\n                                inline\r\n                            ></CustomInput>\r\n\r\n                            <Route\r\n                                render={({ history }) => (\r\n                                    <Edit\r\n                                        className=\"mr-50\"\r\n                                        size=\"25px\"\r\n                                        color=\"blue\"\r\n                                        onClick={() => history.push(\"/app/userride/editUserRide\")}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Trash2\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n    onEditorStateChange = (editorState) => {\r\n        this.setState({\r\n            editorState,\r\n            desc: draftToHtml(convertToRaw(editorState.getCurrentContent())),\r\n        });\r\n        console.log(\"dasd\", this.state.desc)\r\n    };\r\n    handleSelect = (e) => {\r\n        this.setState({ select_sslmedia: e.target.value });\r\n    };\r\n    handleAdd = async (e) => {\r\n        e.preventDefault();\r\n        const data = new FormData();\r\n        data.append(\"desc\", this.state.desc);\r\n        axiosConfig\r\n            .post(`/admin/admin_Addevent`, data)\r\n            .then((response) => {\r\n                console.log(\"DFSS@@@@@@@FD\", response.data);\r\n                // swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n                this.props.history.push(\"/app/event/bookEvent/bookEventList\");\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n    changeHandler = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    };\r\n    getAllPage = async () => {\r\n        await axios\r\n            .get(\"http://65.2.148.70:8000/admin/getPages\")\r\n            .then((response) => {\r\n                let rowData = response.data.data;\r\n                this.setState({ rowData });\r\n            });\r\n    };\r\n    componentDidMount() {\r\n        this.getAllPage();\r\n    }\r\n\r\n    async runthisfunction(id) {\r\n\r\n        await axios.get(`http://65.2.148.70:8000/admin/dltPages/${id}`).then(\r\n            (response) => {\r\n                console.log(response);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            <div>\r\n                <Breadcrumbs\r\n                    breadCrumbTitle=\"Other Page\"\r\n                    breadCrumbParent=\"Home\"\r\n                    breadCrumbActive=\"Other Page \"\r\n                />\r\n\r\n                <Row className=\"app-user-list\">\r\n                    <Col sm=\"12\"></Col>\r\n                    <Col sm=\"12\">\r\n                        <Card>\r\n                            <Row className=\"m-2\">\r\n\r\n                                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                                    <h3>Add Page</h3>\r\n                                </Col>\r\n                                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                                    <Input\r\n                                        required\r\n                                        type=\"text\"\r\n                                        name=\"url\"\r\n                                        placeholder=\"Enter Page Name\"\r\n                                        value={this.state.url}\r\n                                        onChange={this.changeHandler}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg=\"12\" md=\"12\" sm=\"12\" className=\"mb-2\">\r\n                                    <Label className=\"my-1\">Page Description</Label>\r\n                                    <br />\r\n                                    <Editor\r\n                                        wrapperClassName=\"demo-wrapper\"\r\n                                        editorClassName=\"demo-editor\"\r\n                                        onEditorStateChange={this.onEditorStateChange}\r\n                                        toolbar={{\r\n                                            inline: { inDropdown: true },\r\n                                            list: { inDropdown: true },\r\n                                            textAlign: { inDropdown: true },\r\n                                            link: { inDropdown: true },\r\n                                            history: { inDropdown: true },\r\n                                            image: {\r\n                                                uploadCallback: this.uploadImageCallBack,\r\n                                                previewImage: true,\r\n                                                alt: { present: true, mandatory: true },\r\n                                            },\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Route\r\n                                        render={() => (\r\n                                            <Button\r\n                                                className=\" btn btn-success float-right\"\r\n                                                onClick={this.handleAdd}\r\n                                            >\r\n                                                Add\r\n                                            </Button>\r\n                                        )}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <CardBody>\r\n                                {this.state.rowData === null ? null : (\r\n                                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                            <div className=\"mb-1\">\r\n                                                <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                    <DropdownToggle tag=\"div\">\r\n                                                        {this.gridApi\r\n                                                            ? this.state.currenPageSize\r\n                                                            : \"\" * this.state.getPageSize -\r\n                                                            (this.state.getPageSize - 1)}{\" \"}\r\n                                                        -{\" \"}\r\n                                                        {this.state.rowData.length -\r\n                                                            this.state.currenPageSize *\r\n                                                            this.state.getPageSize >\r\n                                                            0\r\n                                                            ? this.state.currenPageSize *\r\n                                                            this.state.getPageSize\r\n                                                            : this.state.rowData.length}{\" \"}\r\n                                                        of {this.state.rowData.length}\r\n                                                        <ChevronDown className=\"ml-50\" size={15} />\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu right>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(20)}\r\n                                                        >\r\n                                                            20\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(50)}\r\n                                                        >\r\n                                                            50\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(100)}\r\n                                                        >\r\n                                                            100\r\n                                                        </DropdownItem>\r\n                                                        <DropdownItem\r\n                                                            tag=\"div\"\r\n                                                            onClick={() => this.filterSize(134)}\r\n                                                        >\r\n                                                            134\r\n                                                        </DropdownItem>\r\n                                                    </DropdownMenu>\r\n                                                </UncontrolledDropdown>\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                                <div className=\"table-input mr-1\">\r\n                                                    <Input\r\n                                                        placeholder=\"search...\"\r\n                                                        onChange={(e) =>\r\n                                                            this.updateSearchQuery(e.target.value)\r\n                                                        }\r\n                                                        value={this.state.value}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"export-btn\">\r\n                                                    <Button.Ripple\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                    >\r\n                                                        Export as CSV\r\n                                                    </Button.Ripple>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        <ContextLayout.Consumer>\r\n                                            {(context) => (\r\n                                                <AgGridReact\r\n                                                    gridOptions={{}}\r\n                                                    rowSelection=\"multiple\"\r\n                                                    defaultColDef={defaultColDef}\r\n                                                    columnDefs={columnDefs}\r\n                                                    rowData={rowData}\r\n                                                    onGridReady={this.onGridReady}\r\n                                                    colResizeDefault={\"shift\"}\r\n                                                    animateRows={true}\r\n                                                    floatingFilter={false}\r\n                                                    pagination={true}\r\n                                                    paginationPageSize={this.state.paginationPageSize}\r\n                                                    pivotPanelShow=\"always\"\r\n                                                    enableRtl={context.state.direction === \"rtl\"}\r\n                                                />\r\n                                            )}\r\n                                        </ContextLayout.Consumer>\r\n                                    </div>\r\n                                )}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default OtherPage;\r\n"],"sourceRoot":""}